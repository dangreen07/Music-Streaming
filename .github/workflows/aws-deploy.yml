name: Deploy docker image to AWS

on:
    push:
        branches:
            - main

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}-backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}-frontend

jobs:
    build-and-push-backend-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Log in to the Container registry
          uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
          with:
            images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        
        - name: Cache Docker layers
          uses: actions/cache@v4
          with:
            path: /tmp/.buildx-cache
            key: ${{ runner.os }}-buildx-${{ github.sha }}
            restore-keys: |
              ${{ runner.os }}-buildx-

        - name: Build and push Docker image
          id: push
          uses: docker/build-push-action@v6
          with:
            context: ./backend
            platforms: linux/amd64
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=local,src=/tmp/.buildx-cache
            cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

        - # Temp fix
            # https://github.com/docker/build-push-action/issues/252
            # https://github.com/moby/buildkit/issues/1896
            name: Move cache
            run: |
              rm -rf /tmp/.buildx-cache
              mv /tmp/.buildx-cache-new /tmp/.buildx-cache 
    build-and-push-frontend-image:
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            attestations: write
            id-token: write
        steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Log in to the Container registry
          uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
          with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
          with:
            images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Build and push Docker image
          id: push
          uses: docker/build-push-action@v6
          with:
            context: ./frontend
            platforms: linux/amd64
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
    deploy:
        runs-on: ubuntu-latest
        needs:
          - build-and-push-backend-image
          - build-and-push-frontend-image
        steps:
        - name: executing remote ssh commands
          uses: appleboy/ssh-action@v1.2.0
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USERNAME }}
            key: ${{ secrets.SSH_KEY }}
            port: ${{ secrets.PORT }}
            # This command may take a while to compile the rust code
            command_timeout: 45m
            script: 
                |
                cd /home/ubuntu/Music-Streaming
                sudo docker compose stop music-streaming-backend
                sudo docker compose stop music-streaming-frontend
                git pull
                sudo docker compose up --build -d --pull always
